;
; program sample11pp;
$$sample11pp	START
	LAD	gr0,0
	CALL	L0001
	CALL	FLUSH
	SVC	0
; procedure kazuyomikomi(n : integer);
$n%kazuyomikomi	DC	0
; begin
; 	writeln('input the number of data');
$kazuyomikomi
	POP	gr2
	POP	gr1
	ST	gr1,	$n%kazuyomikomi
	PUSH	0,gr2
	LAD	gr1,	L0002
	LD	gr2,gr0
	CALL	WRITESTR
; 	readln(n)
	CALL	WRITELINE
; end;
	LD	gr1,	$n%kazuyomikomi
	CALL	READINT
	CALL	READLINE
; var sum : integer;
	RET
; procedure wakakidasi;
$sum	DC	0
; begin
; 	writeln('Sum of data = ', sum)
$wakakidasi
	LAD	gr1,	L0003
	LD	gr2,gr0
	CALL	WRITESTR
; end;
	LD	gr1,	$sum
	LD	gr2,gr0
	CALL	WRITEINT
	CALL	WRITELINE
; var data : integer;
	RET
; procedure goukei(n, s : integer);
$data	DC	0
$s%goukei	DC	0
$n%goukei	DC	0
; 	var data : integer;
; begin
$data%goukei	DC	0
; 	s := 0;
$goukei
	POP	gr2
	POP	gr1
	ST	gr1,	$s%goukei
	POP	gr1
	ST	gr1,	$n%goukei
	PUSH	0,gr2
	LD	gr1,	$s%goukei
	PUSH	0,gr1
	LAD	gr1,	0
; 	while n > 0 do begin
	POP	gr2
	ST	gr1,0,gr2
L0004
	LD	gr1,	$n%goukei
	LD	gr1,0,gr1
	PUSH	0,gr1
	LAD	gr1,	0
	POP	gr2
	CPA	gr2,gr1
	JPL	L0006
	LD	gr1,gr0
	JUMP	L0007
L0006
	LAD	gr1,1
L0007
	CPA	gr1,gr0
	JZE	L0005
; 		readln(data);
	LAD	gr1,	$data%goukei
	CALL	READINT
	CALL	READLINE
; 		s := s + data;
	LD	gr1,	$s%goukei
	PUSH	0,gr1
	LD	gr1,	$s%goukei
	LD	gr1,0,gr1
	PUSH	0,gr1
; 		n := n - 1
	LD	gr1,	$data%goukei
	POP	gr2
	ADDA	gr1,gr2
	JOV	EOVF
	POP	gr2
	ST	gr1,0,gr2
	LD	gr1,	$n%goukei
	PUSH	0,gr1
	LD	gr1,	$n%goukei
	LD	gr1,0,gr1
; 	end
	PUSH	0,gr1
	LAD	gr1,	1
; end;
	POP	gr2
	SUBA	gr2,gr1
	JOV	EOVF
	LD	gr1,gr2
	POP	gr2
	ST	gr1,0,gr2
	JUMP	L0004
L0005
; var n : integer;
	RET
; begin
$n	DC	0
; 	call kazuyomikomi(n);
L0001
	LAD	gr1,	$n
	PUSH	0,gr1
; 	call goukei(n * 2, sum);
	CALL	$kazuyomikomi
	LAD	gr1,	$n
	LD	gr1, 0,gr1
	PUSH	0,gr1
	LAD	gr1,	2
	POP	gr2
	MULA	gr1,gr2
	JOV	EOVF
	LAD	gr2,	L0008
	ST	gr1, 0,gr2
	PUSH	0,gr2
	LAD	gr1,	$sum
	PUSH	0,gr1
; 	call wakakidasi
	CALL	$goukei
; end.
	CALL	$wakakidasi
	RET
L0002	DC	'input the number of data'
L0003	DC	'Sum of data = '
L0008	DC	0
EOVF
  CALL  WRITELINE
  LAD  gr1, EOVF1
  LD  gr2, gr0
  CALL  WRITESTR
  CALL  WRITELINE
  SVC  1  ;  overflow error stop
EOVF1    DC  '***** Run-Time Error : Overflow *****'
E0DIV
  JNZ  EOVF
  CALL  WRITELINE
  LAD  gr1, E0DIV1
  LD  gr2, gr0
  CALL  WRITESTR
  CALL  WRITELINE
  SVC  2  ;  0-divide error stop
E0DIV1    DC  '***** Run-Time Error : Zero-Divide *****'
EROV
  CALL  WRITELINE
  LAD  gr1, EROV1
  LD  gr2, gr0
  CALL  WRITESTR
  CALL  WRITELINE
  SVC  3  ;  range-over error stop
EROV1    DC  '***** Run-Time Error : Range-Over in Array Index *****'
WRITECHAR
; gr1�̒l�i�����j��gr2�̂������ŏo�͂���D
; gr2��0�Ȃ�K�v�ŏ����̌����ŏo�͂���
  RPUSH
  LD  gr6, SPACE
  LD  gr7, OBUFSIZE
WC1
  SUBA  gr2, ONE  ; while(--c > 0) {
  JZE  WC2
  JMI  WC2
  ST  gr6, OBUF,gr7  ;  *p++ = ' ';
  CALL  BOVFCHECK
  JUMP  WC1  ; }
WC2
  ST  gr1, OBUF,gr7  ; *p++ = gr1;
  CALL  BOVFCHECK
  ST  gr7, OBUFSIZE
  RPOP
  RET
WRITESTR
; gr1���w���������gr2�̂������ŏo�͂���D
; gr2��0�Ȃ�K�v�ŏ����̌����ŏo�͂���
  RPUSH
  LD  gr6, gr1  ; p = gr1;
WS1
  LD  gr4, 0,gr6  ; while(*p != '\0') {
  JZE  WS2
  ADDA  gr6, ONE  ;  p++;
  SUBA  gr2, ONE  ;  c--;
  JUMP  WS1  ; }
WS2
  LD  gr7, OBUFSIZE  ; q = OBUFSIZE;
  LD  gr5, SPACE
WS3
  SUBA  gr2, ONE  ; while(--c >= 0) {
  JMI  WS4
  ST  gr5, OBUF,gr7  ;  *q++ = ' ';
  CALL  BOVFCHECK
  JUMP  WS3  ; }
WS4
  LD  gr4, 0,gr1  ; while(*gr1 != '\0') {
  JZE  WS5
  ST  gr4, OBUF,gr7  ;  *q++ = *gr1++;
  ADDA  gr1, ONE
  CALL  BOVFCHECK
  JUMP  WS4  ; }
WS5
  ST  gr7, OBUFSIZE  ; OBUFSIZE = q;
  RPOP
  RET
BOVFCHECK
    ADDA  gr7, ONE
    CPA   gr7, BOVFLEVEL
    JMI  BOVF1
    CALL  WRITELINE
    LD gr7, OBUFSIZE
BOVF1
    RET
BOVFLEVEL  DC 256
WRITEINT
; gr1�̒l�i�����j��gr2�̂������ŏo�͂���D
; gr2��0�Ȃ�K�v�ŏ����̌����ŏo�͂���
  RPUSH
  LD  gr7, gr0  ; flag = 0;
  CPA  gr1, gr0  ; if(gr1>=0) goto WI1;
  JPL  WI1
  JZE  WI1
  LD  gr4, gr0  ; gr1= - gr1;
  SUBA  gr4, gr1
  CPA  gr4, gr1
  JZE  WI6
  LD  gr1, gr4
  LD  gr7, ONE  ; flag = 1;
WI1
  LD  gr6, SIX  ; p = INTBUF+6;
  ST  gr0, INTBUF,gr6  ; *p = '\0';
  SUBA  gr6, ONE  ; p--;
  CPA  gr1, gr0  ; if(gr1 == 0)
  JNZ  WI2
  LD  gr4, ZERO  ;  *p = '0';
  ST  gr4, INTBUF,gr6
  JUMP  WI5  ; }
WI2      ; else {
  CPA  gr1, gr0  ;  while(gr1 != 0) {
  JZE  WI3
  LD  gr5, gr1  ;   gr5 = gr1 - (gr1 / 10) * 10;
  DIVA  gr1, TEN  ;   gr1 /= 10;
  LD  gr4, gr1
  MULA  gr4, TEN
  SUBA  gr5, gr4
  ADDA  gr5, ZERO  ;   gr5 += '0';
  ST  gr5, INTBUF,gr6  ;   *p = gr5;
  SUBA  gr6, ONE  ;   p--;
  JUMP  WI2  ;  }
WI3
  CPA  gr7, gr0  ;  if(flag != 0) {
  JZE  WI4
  LD  gr4, MINUS  ;   *p = '-';
  ST  gr4, INTBUF,gr6
  JUMP  WI5  ;  }
WI4
  ADDA  gr6, ONE  ;  else p++;
    ; }
WI5
  LAD  gr1, INTBUF,gr6  ; gr1 = p;
  CALL  WRITESTR  ; WRITESTR();
  RPOP
  RET
WI6
  LAD  gr1, MMINT
  CALL  WRITESTR  ; WRITESTR();
  RPOP
  RET
MMINT    DC  '-32768'
WRITEBOOL
; gr1�̒l�i�^���l�j��0�Ȃ�'FALSE'��
; 0�ȊO�Ȃ�'TRUE'��gr2�̂������ŏo�͂���D
; gr2��0�Ȃ�K�v�ŏ����̌����ŏo�͂���
  RPUSH
  CPA  gr1, gr0  ; if(gr1 != 0)
  JZE  WB1
  LAD  gr1, WBTRUE  ;  gr1 = "TRUE";
  JUMP  WB2
WB1      ; else
  LAD  gr1, WBFALSE  ;  gr1 = "FALSE";
WB2
  CALL  WRITESTR  ; WRITESTR();
  RPOP
  RET
WBTRUE    DC  'TRUE'
WBFALSE    DC  'FALSE'
WRITELINE
; ���s���o�͂���
  RPUSH
  LD  gr7, OBUFSIZE
  LD  gr6, NEWLINE
  ST  gr6, OBUF,gr7
  ADDA  gr7, ONE
  ST  gr7, OBUFSIZE
  OUT  OBUF, OBUFSIZE
  ST  gr0, OBUFSIZE
  RPOP
  RET
FLUSH
  RPUSH
  LD gr7, OBUFSIZE
  JZE FL1
  CALL WRITELINE
FL1
  RPOP
  RET
READCHAR
; gr1���w���Ԓn�ɕ������ǂݍ���
  RPUSH
  LD  gr5, RPBBUF  ; if(RPBBUF != '\0') {
  JZE  RC0
  ST  gr5, 0,gr1  ;  *gr1 = RPBBUF;
  ST  gr0, RPBBUF  ;  RPBBUF = '\0'
  JUMP  RC3  ;  return; }
RC0
  LD  gr7, INP  ; inp = INP;
  LD  gr6, IBUFSIZE  ; if(IBUFSIZE == 0) {
  JNZ  RC1
  IN  IBUF, IBUFSIZE  ;  IN();
  LD  gr7, gr0  ;  inp = 0;
    ; }
RC1
  CPA  gr7, IBUFSIZE  ; if(inp == IBUFSIZE) {
  JNZ  RC2
  LD  gr5, NEWLINE  ;  *gr1 = '\n';
  ST  gr5, 0,gr1
  ST  gr0, IBUFSIZE  ;  IBUFSIZE = INP = 0;
  ST  gr0, INP
  JUMP  RC3  ; }
RC2      ; else {
  LD  gr5, IBUF,gr7  ;  *gr1 = *inp++;
  ADDA  gr7, ONE
  ST  gr5, 0,gr1
  ST  gr7, INP  ;  INP = inp;
RC3      ; }
  RPOP
  RET
READINT
; gr1���w���Ԓn�ɐ����l���ǂݍ���
  RPUSH
RI1      ; do {
  CALL  READCHAR  ;  ch = READCHAR();
  LD  gr7, 0,gr1
  CPA  gr7, SPACE  ; } while(ch == ' ' || ch == '\t' || ch == '\n');
  JZE  RI1
  CPA  gr7, TAB
  JZE  RI1
  CPA  gr7, NEWLINE
  JZE  RI1
  LD  gr5, ONE  ; flag = 1
  CPA  gr7, MINUS  ; if(ch == '-') {
  JNZ  RI4
  LD  gr5, gr0  ;  flag = 0;
  CALL  READCHAR  ;  ch = READCHAR();
  LD  gr7, 0,gr1
RI4      ; }
  LD  gr6, gr0  ; v = 0;
RI2
  CPA  gr7, ZERO  ; while('0' <= ch && ch <= '9') {
  JMI  RI3
  CPA  gr7, NINE
  JPL  RI3
  MULA  gr6, TEN  ;  v = v*10+ch-'0';
  ADDA  gr6, gr7
  SUBA  gr6, ZERO
  CALL  READCHAR  ;  ch = READSCHAR();
  LD  gr7, 0,gr1
  JUMP  RI2  ; }
RI3
  ST  gr7, RPBBUF  ; ReadPushBack();
  ST  gr6, 0,gr1  ; *gr1 = v;
  CPA  gr5, gr0  ; if(flag == 0) {
  JNZ  RI5
  SUBA  gr5, gr6  ;  *gr1 = -v;
  ST  gr5, 0,gr1
RI5      ; }
  RPOP
  RET
READLINE
; ���͂����s�R�[�h�܂Łi���s�R�[�h���܂ށj�ǂݔ�΂�
  ST  gr0, IBUFSIZE
  ST  gr0, INP
  ST  gr0, RPBBUF
  RET
ONE    DC  1
SIX    DC  6
TEN    DC  10
SPACE    DC  #0020  ; ' '
MINUS    DC  #002D  ; '-'
TAB    DC  #0009  ; '\t'
ZERO    DC  #0030  ; '0'
NINE    DC  #0039  ; '9'
NEWLINE    DC  #000A  ; '\n'
INTBUF    DS  8
OBUFSIZE  DC  0
IBUFSIZE  DC  0
INP    DC  0
OBUF    DS  257
IBUF    DS  257
RPBBUF    DC  0
	END