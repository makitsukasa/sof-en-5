; start SPROGRAM
; 1d10480 SPROGRAM 
$1d10480	START
	LAD		gr0,0
; 1d11580 SBLOCK 
	CALL	$1d11580
	CALL	FLUSH
	SVC		0
; start SCOMPSTAT under SBLOCK
; 1d11580 SBLOCK 
$1d11580
; start SCONDSTAT
; 1d18c80 SCONST 
; 1d18c80 SCONST 
	LD		gr1,$1d18c80
	PUSH	0,gr1
; 1d20c00 SCONST 
; 1d20c00 SCONST 
	LD		gr1,$1d20c00
	LD		gr2,gr1
	POP		gr1
; LEA
	LD		gr3,TRUE
	CPA		gr1,gr2
	JMI		.1d15dc0
	LD		gr3,FALSE
.1d15dc0	LD		gr1,gr3
	CPA		gr1,gr0
; 1d306c0 else else
	JZE		$1d306c0
; start SOUTSTAT
; 1d2e900 STRING 4 < 2 is true
; 1d2e900 STRING 4 < 2 is true
	LAD		gr1,$1d2e900
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1d15540
; 1d306c0 else else
$1d306c0
; start SOUTSTAT
; 1d38640 STRING 4 < 2 is false
; 1d38640 STRING 4 < 2 is false
	LAD		gr1,$1d38640
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1d15540
; end   SCONDSTAT
; start SCONDSTAT
; 1d3f900 SCONST 
; 1d3f900 SCONST 
	LD		gr1,$1d3f900
	PUSH	0,gr1
; 1d48100 SCONST 
; 1d48100 SCONST 
	LD		gr1,$1d48100
	LD		gr2,gr1
	POP		gr1
; GRA
	LD		gr3,TRUE
	CPA		gr1,gr2
	JPL		.1d3ca40
	LD		gr3,FALSE
.1d3ca40	LD		gr1,gr3
	CPA		gr1,gr0
; 1d57bc0 else else
	JZE		$1d57bc0
; start SOUTSTAT
; 1d55e00 STRING 4 > 2 is true
; 1d55e00 STRING 4 > 2 is true
	LAD		gr1,$1d55e00
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1d3c1c0
; 1d57bc0 else else
$1d57bc0
; start SOUTSTAT
; 1d5fb40 STRING 4 > 2 is false
; 1d5fb40 STRING 4 > 2 is false
	LAD		gr1,$1d5fb40
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1d3c1c0
; end   SCONDSTAT
; start SCONDSTAT
; 1d669c0 SCONST 
; 1d669c0 SCONST 
	LD		gr1,$1d669c0
	PUSH	0,gr1
; 1d6ed80 SCONST 
; 1d6ed80 SCONST 
	LD		gr1,$1d6ed80
	LD		gr2,gr1
	POP		gr1
; LEEQA
	LD		gr3,FALSE
	CPA		gr1,gr2
	JPL		.1d63b00
	LD		gr3,TRUE
.1d63b00	LD		gr1,gr3
	CPA		gr1,gr0
; 1d7e840 else else
	JZE		$1d7e840
; start SOUTSTAT
; 1d7ca80 STRING 4 <= 2 is true
; 1d7ca80 STRING 4 <= 2 is true
	LAD		gr1,$1d7ca80
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1d63280
; 1d7e840 else else
$1d7e840
; start SOUTSTAT
; 1d867c0 STRING 4 <= 2 is false
; 1d867c0 STRING 4 <= 2 is false
	LAD		gr1,$1d867c0
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1d63280
; end   SCONDSTAT
; start SCONDSTAT
; 1d8d640 SCONST 
; 1d8d640 SCONST 
	LD		gr1,$1d8d640
	PUSH	0,gr1
; 1d96280 SCONST 
; 1d96280 SCONST 
	LD		gr1,$1d96280
	LD		gr2,gr1
	POP		gr1
; GREQA
	LD		gr3,FALSE
	CPA		gr1,gr2
	JMI		.1d8a780
	LD		gr3,TRUE
.1d8a780	LD		gr1,gr3
	CPA		gr1,gr0
; 1da5d40 else else
	JZE		$1da5d40
; start SOUTSTAT
; 1da3f80 STRING 4 >= 2 is true
; 1da3f80 STRING 4 >= 2 is true
	LAD		gr1,$1da3f80
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1d89f00
; 1da5d40 else else
$1da5d40
; start SOUTSTAT
; 1dadcc0 STRING 4 >= 2 is false
; 1dadcc0 STRING 4 >= 2 is false
	LAD		gr1,$1dadcc0
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1d89f00
; end   SCONDSTAT
; start SCONDSTAT
; 1db4b40 SCONST 
; 1db4b40 SCONST 
	LD		gr1,$1db4b40
	PUSH	0,gr1
; 1dbc240 SCONST 
; 1dbc240 SCONST 
	LD		gr1,$1dbc240
	LD		gr2,gr1
	POP		gr1
; EQUAL
	LD		gr3,TRUE
	CPA		gr1,gr2
	JZE		.1db1c80
	LD		gr3,FALSE
.1db1c80	LD		gr1,gr3
	CPA		gr1,gr0
; 1dcbd00 else else
	JZE		$1dcbd00
; start SOUTSTAT
; 1dc9f40 STRING 4 =  2 is true
; 1dc9f40 STRING 4 =  2 is true
	LAD		gr1,$1dc9f40
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1db1400
; 1dcbd00 else else
$1dcbd00
; start SOUTSTAT
; 1dd3c80 STRING 4 =  2 is false
; 1dd3c80 STRING 4 =  2 is false
	LAD		gr1,$1dd3c80
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1db1400
; end   SCONDSTAT
; start SCONDSTAT
; 1ddab00 SCONST 
; 1ddab00 SCONST 
	LD		gr1,$1ddab00
	PUSH	0,gr1
; 1de2640 SCONST 
; 1de2640 SCONST 
	LD		gr1,$1de2640
	LD		gr2,gr1
	POP		gr1
; NOTEQ
	LD		gr3,TRUE
	CPA		gr1,gr2
	JNZ		.1dd7c40
	LD		gr3,FALSE
.1dd7c40	LD		gr1,gr3
	CPA		gr1,gr0
; 1df2100 else else
	JZE		$1df2100
; start SOUTSTAT
; 1df0340 STRING 4 <> 2 is true
; 1df0340 STRING 4 <> 2 is true
	LAD		gr1,$1df0340
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1dd73c0
; 1df2100 else else
$1df2100
; start SOUTSTAT
; 1dfa080 STRING 4 <> 2 is false
; 1dfa080 STRING 4 <> 2 is false
	LAD		gr1,$1dfa080
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1dd73c0
; end   SCONDSTAT
; start SCONDSTAT
; 1e00f00 SCONST 
; 1e00f00 SCONST 
	LD		gr1,$1e00f00
	PUSH	0,gr1
; 1e08e80 SCONST 
; 1e08e80 SCONST 
	LD		gr1,$1e08e80
	LD		gr2,gr1
	POP		gr1
; LEA
	LD		gr3,TRUE
	CPA		gr1,gr2
	JMI		.1dfe040
	LD		gr3,FALSE
.1dfe040	LD		gr1,gr3
	CPA		gr1,gr0
; 1e18940 else else
	JZE		$1e18940
; start SOUTSTAT
; 1e16b80 STRING 4 < 7 is true
; 1e16b80 STRING 4 < 7 is true
	LAD		gr1,$1e16b80
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1dfd7c0
; 1e18940 else else
$1e18940
; start SOUTSTAT
; 1e208c0 STRING 4 < 7 is false
; 1e208c0 STRING 4 < 7 is false
	LAD		gr1,$1e208c0
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1dfd7c0
; end   SCONDSTAT
; start SCONDSTAT
; 1e27740 SCONST 
; 1e27740 SCONST 
	LD		gr1,$1e27740
	PUSH	0,gr1
; 1e2ff40 SCONST 
; 1e2ff40 SCONST 
	LD		gr1,$1e2ff40
	LD		gr2,gr1
	POP		gr1
; GRA
	LD		gr3,TRUE
	CPA		gr1,gr2
	JPL		.1e24880
	LD		gr3,FALSE
.1e24880	LD		gr1,gr3
	CPA		gr1,gr0
; 1e3fa00 else else
	JZE		$1e3fa00
; start SOUTSTAT
; 1e3dc40 STRING 4 > 7 is true
; 1e3dc40 STRING 4 > 7 is true
	LAD		gr1,$1e3dc40
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1e24000
; 1e3fa00 else else
$1e3fa00
; start SOUTSTAT
; 1e47980 STRING 4 > 7 is false
; 1e47980 STRING 4 > 7 is false
	LAD		gr1,$1e47980
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1e24000
; end   SCONDSTAT
; start SCONDSTAT
; 1e4e800 SCONST 
; 1e4e800 SCONST 
	LD		gr1,$1e4e800
	PUSH	0,gr1
; 1e56bc0 SCONST 
; 1e56bc0 SCONST 
	LD		gr1,$1e56bc0
	LD		gr2,gr1
	POP		gr1
; LEEQA
	LD		gr3,FALSE
	CPA		gr1,gr2
	JPL		.1e4b940
	LD		gr3,TRUE
.1e4b940	LD		gr1,gr3
	CPA		gr1,gr0
; 1e66680 else else
	JZE		$1e66680
; start SOUTSTAT
; 1e648c0 STRING 4 <= 7 is true
; 1e648c0 STRING 4 <= 7 is true
	LAD		gr1,$1e648c0
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1e4b0c0
; 1e66680 else else
$1e66680
; start SOUTSTAT
; 1e6e600 STRING 4 <= 7 is false
; 1e6e600 STRING 4 <= 7 is false
	LAD		gr1,$1e6e600
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1e4b0c0
; end   SCONDSTAT
; start SCONDSTAT
; 1e75480 SCONST 
; 1e75480 SCONST 
	LD		gr1,$1e75480
	PUSH	0,gr1
; 1e7e0c0 SCONST 
; 1e7e0c0 SCONST 
	LD		gr1,$1e7e0c0
	LD		gr2,gr1
	POP		gr1
; GREQA
	LD		gr3,FALSE
	CPA		gr1,gr2
	JMI		.1e725c0
	LD		gr3,TRUE
.1e725c0	LD		gr1,gr3
	CPA		gr1,gr0
; 1e8db80 else else
	JZE		$1e8db80
; start SOUTSTAT
; 1e8bdc0 STRING 4 >= 7 is true
; 1e8bdc0 STRING 4 >= 7 is true
	LAD		gr1,$1e8bdc0
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1e71d40
; 1e8db80 else else
$1e8db80
; start SOUTSTAT
; 1e95b00 STRING 4 >= 7 is false
; 1e95b00 STRING 4 >= 7 is false
	LAD		gr1,$1e95b00
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1e71d40
; end   SCONDSTAT
; start SCONDSTAT
; 1e9c980 SCONST 
; 1e9c980 SCONST 
	LD		gr1,$1e9c980
	PUSH	0,gr1
; 1ea4080 SCONST 
; 1ea4080 SCONST 
	LD		gr1,$1ea4080
	LD		gr2,gr1
	POP		gr1
; EQUAL
	LD		gr3,TRUE
	CPA		gr1,gr2
	JZE		.1e99ac0
	LD		gr3,FALSE
.1e99ac0	LD		gr1,gr3
	CPA		gr1,gr0
; 1eb3b40 else else
	JZE		$1eb3b40
; start SOUTSTAT
; 1eb1d80 STRING 4 =  7 is true
; 1eb1d80 STRING 4 =  7 is true
	LAD		gr1,$1eb1d80
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1e99240
; 1eb3b40 else else
$1eb3b40
; start SOUTSTAT
; 1ebbac0 STRING 4 =  7 is false
; 1ebbac0 STRING 4 =  7 is false
	LAD		gr1,$1ebbac0
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1e99240
; end   SCONDSTAT
; start SCONDSTAT
; 1ec2940 SCONST 
; 1ec2940 SCONST 
	LD		gr1,$1ec2940
	PUSH	0,gr1
; 1eca480 SCONST 
; 1eca480 SCONST 
	LD		gr1,$1eca480
	LD		gr2,gr1
	POP		gr1
; NOTEQ
	LD		gr3,TRUE
	CPA		gr1,gr2
	JNZ		.1ebfa80
	LD		gr3,FALSE
.1ebfa80	LD		gr1,gr3
	CPA		gr1,gr0
; 1ed9f40 else else
	JZE		$1ed9f40
; start SOUTSTAT
; 1ed8180 STRING 4 <> 7 is true
; 1ed8180 STRING 4 <> 7 is true
	LAD		gr1,$1ed8180
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1ebf200
; 1ed9f40 else else
$1ed9f40
; start SOUTSTAT
; 1ee1ec0 STRING 4 <> 7 is false
; 1ee1ec0 STRING 4 <> 7 is false
	LAD		gr1,$1ee1ec0
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1ebf200
; end   SCONDSTAT
; start SCONDSTAT
; 1ee8d40 SCONST 
; 1ee8d40 SCONST 
	LD		gr1,$1ee8d40
	PUSH	0,gr1
; 1ef0440 SCONST 
; 1ef0440 SCONST 
	LD		gr1,$1ef0440
	LD		gr2,gr1
	POP		gr1
; EQUAL
	LD		gr3,TRUE
	CPA		gr1,gr2
	JZE		.1ee5e80
	LD		gr3,FALSE
.1ee5e80	LD		gr1,gr3
	CPA		gr1,gr0
; 1efff00 else else
	JZE		$1efff00
; start SOUTSTAT
; 1efe140 STRING 4 =  4 is true
; 1efe140 STRING 4 =  4 is true
	LAD		gr1,$1efe140
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1ee5600
; 1efff00 else else
$1efff00
; start SOUTSTAT
; 1f07e80 STRING 4 =  4 is false
; 1f07e80 STRING 4 =  4 is false
	LAD		gr1,$1f07e80
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1ee5600
; end   SCONDSTAT
; start SCONDSTAT
; 1f0ed00 SCONST 
; 1f0ed00 SCONST 
	LD		gr1,$1f0ed00
	PUSH	0,gr1
; 1f16840 SCONST 
; 1f16840 SCONST 
	LD		gr1,$1f16840
	LD		gr2,gr1
	POP		gr1
; NOTEQ
	LD		gr3,TRUE
	CPA		gr1,gr2
	JNZ		.1f0be40
	LD		gr3,FALSE
.1f0be40	LD		gr1,gr3
	CPA		gr1,gr0
; 1f26300 else else
	JZE		$1f26300
; start SOUTSTAT
; 1f24540 STRING 4 <> 4 is true
; 1f24540 STRING 4 <> 4 is true
	LAD		gr1,$1f24540
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
	JUMP	.1f0b5c0
; 1f26300 else else
$1f26300
; start SOUTSTAT
; 1f2e280 STRING 4 <> 4 is false
; 1f2e280 STRING 4 <> 4 is false
	LAD		gr1,$1f2e280
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1f0b5c0
; end   SCONDSTAT
	RET
; end   SCOMPSTAT under SBLOCK
EOVF
	CALL WRITENEWLINE
	LAD gr1, EOVF1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 1 ; overflow error stop
EOVF1 DC '***** Run-Time Error : Overflow *****'
E0DIV
	JNZ EOVF
	CALL WRITENEWLINE
	LAD gr1, E0DIV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 2 ; 0-divide error stop
E0DIV1 DC '***** Run-Time Error : Zero-Divide *****'
EROV
	CALL WRITENEWLINE
	LAD gr1, EROV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 3 ; range-over error stop
EROV1 DC '***** Run-Time Error : Range-Over in ArrayIndex *****'
WRITECHAR
; gr1 の値（文字）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, SPACE
	LD gr7, OBUFSIZE
WC1
	SUBA gr2, ONE ; while(--c > 0) {
	JZE WC2
	JMI WC2
	ST gr6, OBUF,gr7 ; *p++ = ' ';
	CALL BOVFCHECK
	JUMP WC1 ; }
WC2
	ST gr1, OBUF,gr7 ; *p++ = gr1;
	CALL BOVFCHECK
	ST gr7, OBUFSIZE
	RPOP
	RET
WRITESTR
; gr1 が指す文字列を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, gr1 ; p = gr1;
WS1
	LD gr4, 0,gr6 ; while(*p != '¥0') {
	JZE WS2
	ADDA gr6, ONE ; p++;
	SUBA gr2, ONE ; c- ;
	JUMP WS1 ; }
WS2
	LD gr7, OBUFSIZE ; q = OBUFSIZE;
	LD gr5, SPACE
WS3
	SUBA gr2, ONE ; while(--c >= 0) {
	JMI WS4
	ST gr5, OBUF,gr7 ; *q++ = ' ';
	CALL BOVFCHECK
	JUMP WS3 ; }
WS4
	LD gr4, 0,gr1 ; while(*gr1 != '¥0') {
	JZE WS5
	ST gr4, OBUF,gr7 ; *q++ = *gr1++;
	ADDA gr1, ONE
	CALL BOVFCHECK
	JUMP WS4 ; }
WS5
	ST gr7, OBUFSIZE ; OBUFSIZE = q;
	RPOP
	RET
BOVFCHECK
	ADDA gr7, ONE
	CPA gr7, BOVFLEVEL
	JMI BOVF1
	CALL WRITENEWLINE
	LD gr7, OBUFSIZE
BOVF1
	RET
BOVFLEVEL DC 256
WRITEINT
; gr1 の値（整数）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr7, gr0 ; flag = 0;
	CPA gr1, gr0 ; if(gr1>=0) goto WI1;
	JPL WI1
	JZE WI1
	LD gr4, gr0 ; gr1= - gr1;
	SUBA gr4, gr1
	CPA gr4, gr1
	JZE WI6
	LD gr1, gr4
	LD gr7, ONE ; flag = 1;
WI1
	LD gr6, SIX ; p = INTBUF+6;
	ST gr0, INTBUF,gr6 ; *p = '¥0';
	SUBA gr6, ONE ; p- ;
	CPA gr1, gr0 ; if(gr1 == 0)
	JNZ WI2
	LD gr4, ZERO ; *p = '0';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI2 ; else {
	CPA gr1, gr0 ; while(gr1 != 0) {
	JZE WI3
	LD gr5, gr1 ; gr5 = gr1 - (gr1 / 10) * 10;
	DIVA gr1, TEN ; gr1 /= 10;
	LD gr4, gr1
	MULA gr4, TEN
	SUBA gr5, gr4
	ADDA gr5, ZERO ; gr5 += '0';
	ST gr5, INTBUF,gr6 ; *p = gr5;
	SUBA gr6, ONE ; p- ;
	JUMP WI2 ; }
WI3
	CPA gr7, gr0 ; if(flag != 0) {
	JZE WI4
	LD gr4, MINUS ; *p = '-';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI4
	ADDA gr6, ONE ; else p++;
	; }
WI5
	LAD gr1, INTBUF,gr6 ; gr1 = p;
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WI6
	LAD gr1, MMINT
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
MMINT DC '-32768'
WRITEBOOL
; gr1 の値（真理値）が 0 なら'FALSE'を
; 0 以外なら'TRUE'を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	CPA gr1, gr0 ; if(gr1 != 0)
	JZE WB1
	LAD gr1, WBTRUE ; gr1 = "TRUE";
	JUMP WB2
WB1 ; else
	LAD gr1, WBFALSE ; gr1 = "FALSE";
WB2
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WBTRUE DC 'TRUE'
WBFALSE DC 'FALSE'
WRITENEWLINE
; 改行を出力する
	RPUSH
	LD gr7, OBUFSIZE
	LD gr6, NEWLINE
	ST gr6, OBUF,gr7
	ADDA gr7, ONE
	ST gr7, OBUFSIZE
	OUT OBUF, OBUFSIZE
	ST gr0, OBUFSIZE
	RPOP
	RET
FLUSH
	RPUSH
	LD gr7, OBUFSIZE
	JZE FL1
	CALL WRITENEWLINE
FL1
	RPOP
	RET
READCHAR
; gr1 が指す番地に文字一つを読み込む
	RPUSH
	LD gr5, RPBBUF ; if(RPBBUF != '¥0') {
	JZE RC0
	ST gr5, 0,gr1 ; *gr1 = RPBBUF;
	ST gr0, RPBBUF ; RPBBUF = '¥0'
	JUMP RC3 ; return; }
RC0
	LD gr7, INP ; inp = INP;
	LD gr6, IBUFSIZE ; if(IBUFSIZE == 0) {
	JNZ RC1
	IN IBUF, IBUFSIZE ; IN();
	LD gr7, gr0 ; inp = 0; }
RC1
	CPA gr7, IBUFSIZE ; if(inp == IBUFSIZE) {
	JNZ RC2
	LD gr5, NEWLINE ; *gr1 = '¥n';
	ST gr5, 0,gr1
	ST gr0, IBUFSIZE ; IBUFSIZE = INP = 0;
	ST gr0, INP
	JUMP RC3 ; }
RC2 ; else {
	LD gr5, IBUF,gr7 ; *gr1 = *inp++;
	ADDA gr7, ONE
	ST gr5, 0,gr1
	ST gr7, INP ; INP = inp;
RC3 ; }
	RPOP
	RET
READINT
; gr1 が指す番地に整数値一つを読み込む
	RPUSH
RI1 ; do {
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
	CPA gr7, SPACE ; } while(ch==' ' || ch=='¥t' || ch=='¥n');
	JZE RI1
	CPA gr7, TAB
	JZE RI1
	CPA gr7, NEWLINE
	JZE RI1
	LD gr5, ONE ; flag = 1
	CPA gr7, MINUS ; if(ch == '-') {
	JNZ RI4
	LD gr5, gr0 ; flag = 0;
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
RI4 ; }
	LD gr6, gr0 ; v = 0;
RI2
	CPA gr7, ZERO ; while('0' <= ch && ch <= '9') {
	JMI RI3
	CPA gr7, NINE
	JPL RI3
	MULA gr6, TEN ; v = v*10+ch-'0';
	ADDA gr6, gr7
	SUBA gr6, ZERO
	CALL READCHAR ; ch = READSCHAR();
	LD gr7, 0,gr1
	JUMP RI2 ; }
RI3
	ST gr7, RPBBUF ; ReadPushBack();
	ST gr6, 0,gr1 ; *gr1 = v;
	CPA gr5, gr0 ; if(flag == 0) {
	JNZ RI5
	SUBA gr5, gr6 ; *gr1 = -v;
	ST gr5, 0,gr1
RI5 ; }
	RPOP
	RET
READSKIPTONEWLINE
; 入力を改行コードまで（改行コードも含む）読み飛ばす
	ST gr0, IBUFSIZE
	ST gr0, INP
	ST gr0, RPBBUF
	RET
TRUE DC 1
FALSE DC 0
ONE DC 1
SIX DC 6
TEN DC 10
SPACE DC #0020 ; ' '
MINUS DC #002D ; '-'
TAB DC #0009 ; '¥t'
ZERO DC #0030 ; '0'
NINE DC #0039 ; '9'
NEWLINE DC #000A ; '¥n'
INTBUF DS 8
OBUFSIZE DC 0
IBUFSIZE DC 0
INP DC 0
OBUF DS 257
IBUF DS 257
RPBBUF DC 0
$1d18c80	DC		4
$1d20c00	DC		2
$1d2e900	DC		'4 < 2 is true'
$1d38640	DC		'4 < 2 is false'
$1d3f900	DC		4
$1d48100	DC		2
$1d55e00	DC		'4 > 2 is true'
$1d5fb40	DC		'4 > 2 is false'
$1d669c0	DC		4
$1d6ed80	DC		2
$1d7ca80	DC		'4 <= 2 is true'
$1d867c0	DC		'4 <= 2 is false'
$1d8d640	DC		4
$1d96280	DC		2
$1da3f80	DC		'4 >= 2 is true'
$1dadcc0	DC		'4 >= 2 is false'
$1db4b40	DC		4
$1dbc240	DC		2
$1dc9f40	DC		'4 =  2 is true'
$1dd3c80	DC		'4 =  2 is false'
$1ddab00	DC		4
$1de2640	DC		2
$1df0340	DC		'4 <> 2 is true'
$1dfa080	DC		'4 <> 2 is false'
$1e00f00	DC		4
$1e08e80	DC		7
$1e16b80	DC		'4 < 7 is true'
$1e208c0	DC		'4 < 7 is false'
$1e27740	DC		4
$1e2ff40	DC		7
$1e3dc40	DC		'4 > 7 is true'
$1e47980	DC		'4 > 7 is false'
$1e4e800	DC		4
$1e56bc0	DC		7
$1e648c0	DC		'4 <= 7 is true'
$1e6e600	DC		'4 <= 7 is false'
$1e75480	DC		4
$1e7e0c0	DC		7
$1e8bdc0	DC		'4 >= 7 is true'
$1e95b00	DC		'4 >= 7 is false'
$1e9c980	DC		4
$1ea4080	DC		7
$1eb1d80	DC		'4 =  7 is true'
$1ebbac0	DC		'4 =  7 is false'
$1ec2940	DC		4
$1eca480	DC		7
$1ed8180	DC		'4 <> 7 is true'
$1ee1ec0	DC		'4 <> 7 is false'
$1ee8d40	DC		4
$1ef0440	DC		4
$1efe140	DC		'4 =  4 is true'
$1f07e80	DC		'4 =  4 is false'
$1f0ed00	DC		4
$1f16840	DC		4
$1f24540	DC		'4 <> 4 is true'
$1f2e280	DC		'4 <> 4 is false'
	END
