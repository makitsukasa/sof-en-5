; start SPROGRAM
$SPROGRAM0x2318480	START
	LAD		gr0,0
	CALL	$SBLOCK0x2319580
	CALL	FLUSH
	SVC		0
; start SSUBPROGDEC
$n%kazuyomikomi	DS		1
%kazuyomikomi
	POP		gr7
	POP		gr1
	ST		gr1,$n%kazuyomikomi
	PUSH	0,gr7
; start SOUTSTAT
$STRING0x23298c0	DC		'input the number of data * 1/2'
	LAD		gr1,$STRING0x23298c0
	LD		gr2,gr0
	CALL	WRITESTR
	CALL	WRITENEWLINE
; end   SOUTSTAT
; start SINSTAT
	LAD		gr1,$n%kazuyomikomi
	CALL	READINT
	CALL	READSKIPTONEWLINE
; end   SINSTAT
	RET
; end   SSUBPROGDEC
$sum%%global%	DS		1
; start SSUBPROGDEC
%wakakidasi
	POP		gr7
	PUSH	0,gr7
; start SOUTSTAT
$STRING0x2346800	DC		'Sum of data = '
	LAD		gr1,$STRING0x2346800
	LD		gr2,gr0
	CALL	WRITESTR
	LAD		gr1,$sum%%global%
	LD		gr2,gr0
	CALL	WRITEINT
	CALL	WRITENEWLINE
; end   SOUTSTAT
	RET
; end   SSUBPROGDEC
$data%%global%	DS		1
; start SSUBPROGDEC
$n%goukei	DS		1
$s%goukei	DS		1
$data%goukei	DS		1
%goukei
	POP		gr7
	POP		gr1
	ST		gr1,$s%goukei
	POP		gr1
	ST		gr1,$n%goukei
	PUSH	0,gr7
$SCONST0x236c380	DC		0
	LD		gr1,$SCONST0x236c380
	ST		gr1,$s%goukei
; start SITERSTAT
$SITERSTAT0x2375400
	LAD		gr1,$n%goukei
	PUSH	0,gr1
$SCONST0x2381780	DC		0
	LD		gr1,$SCONST0x2381780
	LD		gr2,gr1
	POP		gr1
; 	GR		gr1, gr2
	JZE		$SITERSTAT0x2375400%end%
; start SINSTAT
	LAD		gr1,$data%goukei
	CALL	READINT
	CALL	READSKIPTONEWLINE
; end   SINSTAT
	LAD		gr1,$s%goukei
	PUSH	0,gr1
	LAD		gr1,$data%goukei
	LD		gr2,gr1
	POP		gr1
	ADDA	gr1,gr2
	JOV		EOVF
	ST		gr1,$s%goukei
	LAD		gr1,$n%goukei
	PUSH	0,gr1
$SCONST0x23b3ac0	DC		1
	LD		gr1,$SCONST0x23b3ac0
	LD		gr2,gr1
	POP		gr1
	SUBA	gr1,gr2
	JOV		EOVF
	ST		gr1,$n%goukei
	JUMP	$SITERSTAT0x2375400
$SITERSTAT0x2375400%end%
; end   SITERSTAT
	RET
; end   SSUBPROGDEC
$n%%global%	DS		1
; start SCALLSTAT
; start before call 1st arg
	LAD		gr1,$n%%global%
	PUSH	$n%%global%
; end   before call 1st arg
	CALL	%kazuyomikomi
; end   SCALLSTAT
; start SCALLSTAT
; start before call 1st arg
	LAD		gr1,$n%%global%
	PUSH	0,gr1
$SCONST0x23dde80	DC		2
	LD		gr1,$SCONST0x23dde80
	LD		gr2,gr1
	POP		gr1
	MULA	gr1,gr2
	JOV		EOVF
$SEXPR0x23d8100	DC		0
	ST		gr1,$SEXPR0x23d8100
	PUSH	$SEXPR0x23d8100
; end   before call 1st arg
; start before call 2nd arg or after
	LAD		gr1,$sum%%global%
	PUSH	$sum%%global%
; end   before call 2nd arg or after
	CALL	%goukei
; end   SCALLSTAT
; start SCALLSTAT
	CALL	%wakakidasi
; end   SCALLSTAT
; start SCOMPSTAT under SBLOCK
$SBLOCK0x2319580
; start SCALLSTAT
; start before call 1st arg
	LAD		gr1,$n%%global%
	PUSH	$n%%global%
; end   before call 1st arg
	CALL	%kazuyomikomi
; end   SCALLSTAT
; start SCALLSTAT
; start before call 1st arg
	LAD		gr1,$n%%global%
	PUSH	0,gr1
$SCONST0x23dde80	DC		2
	LD		gr1,$SCONST0x23dde80
	LD		gr2,gr1
	POP		gr1
	MULA	gr1,gr2
	JOV		EOVF
$SEXPR0x23d8100	DC		0
	ST		gr1,$SEXPR0x23d8100
	PUSH	$SEXPR0x23d8100
; end   before call 1st arg
; start before call 2nd arg or after
	LAD		gr1,$sum%%global%
	PUSH	$sum%%global%
; end   before call 2nd arg or after
	CALL	%goukei
; end   SCALLSTAT
; start SCALLSTAT
	CALL	%wakakidasi
; end   SCALLSTAT
; end   SCOMPSTAT under SBLOCK

EOVF
	CALL WRITENEWLINE
	LAD gr1, EOVF1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 1 ; overflow error stop
EOVF1 DC '***** Run-Time Error : Overflow *****'
E0DIV
	JNZ EOVF
	CALL WRITENEWLINE
	LAD gr1, E0DIV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 2 ; 0-divide error stop
E0DIV1 DC '***** Run-Time Error : Zero-Divide *****'
EROV
	CALL WRITENEWLINE
	LAD gr1, EROV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 3 ; range-over error stop
EROV1 DC '***** Run-Time Error : Range-Over in ArrayIndex *****'
WRITECHAR
; gr1 の値（文字）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, SPACE
	LD gr7, OBUFSIZE
WC1
	SUBA gr2, ONE ; while(--c > 0) {
	JZE WC2
	JMI WC2
	ST gr6, OBUF,gr7 ; *p++ = ' ';
	CALL BOVFCHECK
	JUMP WC1 ; }
WC2
	ST gr1, OBUF,gr7 ; *p++ = gr1;
	CALL BOVFCHECK
	ST gr7, OBUFSIZE
	RPOP
	RET
WRITESTR
; gr1 が指す文字列を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, gr1 ; p = gr1;
WS1
	LD gr4, 0,gr6 ; while(*p != '¥0') {
	JZE WS2
	ADDA gr6, ONE ; p++;
	SUBA gr2, ONE ; c- ;
	JUMP WS1 ; }
WS2
	LD gr7, OBUFSIZE ; q = OBUFSIZE;
	LD gr5, SPACE
WS3
	SUBA gr2, ONE ; while(--c >= 0) {
	JMI WS4
	ST gr5, OBUF,gr7 ; *q++ = ' ';
	CALL BOVFCHECK
	JUMP WS3 ; }
WS4
	LD gr4, 0,gr1 ; while(*gr1 != '¥0') {
	JZE WS5
	ST gr4, OBUF,gr7 ; *q++ = *gr1++;
	ADDA gr1, ONE
	CALL BOVFCHECK
	JUMP WS4 ; }
WS5
	ST gr7, OBUFSIZE ; OBUFSIZE = q;
	RPOP
	RET
BOVFCHECK
	ADDA gr7, ONE
	CPA gr7, BOVFLEVEL
	JMI BOVF1
	CALL WRITENEWLINE
	LD gr7, OBUFSIZE
BOVF1
	RET
BOVFLEVEL DC 256
WRITEINT
; gr1 の値（整数）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr7, gr0 ; flag = 0;
	CPA gr1, gr0 ; if(gr1>=0) goto WI1;
	JPL WI1
	JZE WI1
	LD gr4, gr0 ; gr1= - gr1;
	SUBA gr4, gr1
	CPA gr4, gr1
	JZE WI6
	LD gr1, gr4
	LD gr7, ONE ; flag = 1;
WI1
	LD gr6, SIX ; p = INTBUF+6;
	ST gr0, INTBUF,gr6 ; *p = '¥0';
	SUBA gr6, ONE ; p- ;
	CPA gr1, gr0 ; if(gr1 == 0)
	JNZ WI2
	LD gr4, ZERO ; *p = '0';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI2 ; else {
	CPA gr1, gr0 ; while(gr1 != 0) {
	JZE WI3
	LD gr5, gr1 ; gr5 = gr1 - (gr1 / 10) * 10;
	DIVA gr1, TEN ; gr1 /= 10;
	LD gr4, gr1
	MULA gr4, TEN
	SUBA gr5, gr4
	ADDA gr5, ZERO ; gr5 += '0';
	ST gr5, INTBUF,gr6 ; *p = gr5;
	SUBA gr6, ONE ; p- ;
	JUMP WI2 ; }
WI3
	CPA gr7, gr0 ; if(flag != 0) {
	JZE WI4
	LD gr4, MINUS ; *p = '-';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI4
	ADDA gr6, ONE ; else p++;
	; }
WI5
	LAD gr1, INTBUF,gr6 ; gr1 = p;
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WI6
	LAD gr1, MMINT
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
MMINT DC '-32768'
WRITEBOOL
; gr1 の値（真理値）が 0 なら'FALSE'を
; 0 以外なら'TRUE'を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	CPA gr1, gr0 ; if(gr1 != 0)
	JZE WB1
	LAD gr1, WBTRUE ; gr1 = "TRUE";
	JUMP WB2
WB1 ; else
	LAD gr1, WBFALSE ; gr1 = "FALSE";
WB2
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WBTRUE DC 'TRUE'
WBFALSE DC 'FALSE'
WRITENEWLINE
; 改行を出力する
	RPUSH
	LD gr7, OBUFSIZE
	LD gr6, NEWLINE
	ST gr6, OBUF,gr7
	ADDA gr7, ONE
	ST gr7, OBUFSIZE
	OUT OBUF, OBUFSIZE
	ST gr0, OBUFSIZE
	RPOP
	RET
FLUSH
	RPUSH
	LD gr7, OBUFSIZE
	JZE FL1
	CALL WRITENEWLINE
FL1
	RPOP
	RET
READCHAR
; gr1 が指す番地に文字一つを読み込む
	RPUSH
	LD gr5, RPBBUF ; if(RPBBUF != '¥0') {
	JZE RC0
	ST gr5, 0,gr1 ; *gr1 = RPBBUF;
	ST gr0, RPBBUF ; RPBBUF = '¥0'
	JUMP RC3 ; return; }
RC0
	LD gr7, INP ; inp = INP;
	LD gr6, IBUFSIZE ; if(IBUFSIZE == 0) {
	JNZ RC1
	IN IBUF, IBUFSIZE ; IN();
	LD gr7, gr0 ; inp = 0; }
RC1
	CPA gr7, IBUFSIZE ; if(inp == IBUFSIZE) {
	JNZ RC2
	LD gr5, NEWLINE ; *gr1 = '¥n';
	ST gr5, 0,gr1
	ST gr0, IBUFSIZE ; IBUFSIZE = INP = 0;
	ST gr0, INP
	JUMP RC3 ; }
RC2 ; else {
	LD gr5, IBUF,gr7 ; *gr1 = *inp++;
	ADDA gr7, ONE
	ST gr5, 0,gr1
	ST gr7, INP ; INP = inp;
RC3 ; }
	RPOP
	RET
READINT
; gr1 が指す番地に整数値一つを読み込む
RPUSH
RI1 ; do {
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
	CPA gr7, SPACE ; } while(ch==' ' || ch=='¥t' || ch=='¥n');
	JZE RI1
	CPA gr7, TAB
	JZE RI1
	CPA gr7, NEWLINE
	JZE RI1
	LD gr5, ONE ; flag = 1
	CPA gr7, MINUS ; if(ch == '-') {
	JNZ RI4
	LD gr5, gr0 ; flag = 0;
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
RI4 ; }
	LD gr6, gr0 ; v = 0;
RI2
	CPA gr7, ZERO ; while('0' <= ch && ch <= '9') {
	JMI RI3
	CPA gr7, NINE
	JPL RI3
	MULA gr6, TEN ; v = v*10+ch-'0';
	ADDA gr6, gr7
	SUBA gr6, ZERO
	CALL READCHAR ; ch = READSCHAR();
	LD gr7, 0,gr1
	JUMP RI2 ; }
RI3
	ST gr7, RPBBUF ; ReadPushBack();
	ST gr6, 0,gr1 ; *gr1 = v;
	CPA gr5, gr0 ; if(flag == 0) {
	JNZ RI5
	SUBA gr5, gr6 ; *gr1 = -v;
	ST gr5, 0,gr1
RI5 ; }
	RPOP
	RET
READSKIPTONEWLINE
; 入力を改行コードまで（改行コードも含む）読み飛ばす
	ST gr0, IBUFSIZE
	ST gr0, INP
	ST gr0, RPBBUF
	RET
FALSE DC 0
TRUE DC 1
ONE DC 1
SIX DC 6
TEN DC 10
SPACE DC #0020 ; ' '
MINUS DC #002D ; '-'
TAB DC #0009 ; '¥t'
ZERO DC #0030 ; '0'
NINE DC #0039 ; '9'
NEWLINE DC #000A ; '¥n'
INTBUF DS 8
OBUFSIZE DC 0
IBUFSIZE DC 0
INP DC 0
OBUF DS 257
IBUF DS 257
RPBBUF DC 0
	END
