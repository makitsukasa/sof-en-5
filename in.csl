; start SPROGRAM
; 1ebe480 SPROGRAM 
$1ebe480	START
	LAD		gr0,0
; 1ebf580 SBLOCK 
	CALL	$1ebf580
	CALL	FLUSH
	SVC		0
; 200c3b0 var i % %%grobal%%
; 200c860 var b % %%grobal%%
; 200cd10 var c % %%grobal%%
; start SCOMPSTAT under SBLOCK
; 1ebf580 SBLOCK 
$1ebf580
; start assign
; 1ed9e80 SCONST 
; 1ed9e80 SCONST 
	LD		gr1,$1ed9e80
; 200c3b0 var i % %%grobal%%
	ST		gr1,$200c3b0
; end   assign
; start SITERSTAT
; 1ee90c0 SITERSTAT 
$1ee90c0
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	PUSH	0,gr1
; 1efb600 SCONST 
; 1efb600 SCONST 
	LD		gr1,$1efb600
	LD		gr2,gr1
	POP		gr1
; GRA
	LD		gr3,FALSE
	CPA		gr1,gr2
	JPL		.1ee9940
	LD		gr3,TRUE
.1ee9940	LD		gr1,gr3
	CPA		gr1,gr0
	JZE		.1ee90c0
; start SOUTSTAT
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	LD		gr2,gr0
	CALL	WRITEBOOL
; 1f2e600 STRING  : 
; 1f2e600 STRING  : 
	LAD		gr1,$1f2e600
	LD		gr2,gr0
	CALL	WRITESTR
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	LD		gr2,gr0
	CALL	WRITEINT
	CALL	WRITENEWLINE
; end   SOUTSTAT
; start assign
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	PUSH	0,gr1
; 1f45c00 SCONST 
; 1f45c00 SCONST 
	LD		gr1,$1f45c00
	LD		gr2,gr1
	POP		gr1
	ADDA	gr1,gr2
	JOV		EOVF
; 200c3b0 var i % %%grobal%%
	ST		gr1,$200c3b0
; end   assign
; 1ee90c0 SITERSTAT 
	JUMP	$1ee90c0
.1ee90c0
; end   SITERSTAT
; start assign
; 1f60940 SCONST 
; 1f60940 SCONST 
	LD		gr1,$1f60940
; 200c3b0 var i % %%grobal%%
	ST		gr1,$200c3b0
; end   assign
; start SITERSTAT
; 1f6ffc0 SITERSTAT 
$1f6ffc0
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	PUSH	0,gr1
; 1f7bac0 SCONST 
; 1f7bac0 SCONST 
	LD		gr1,$1f7bac0
	LD		gr2,gr1
	POP		gr1
; GRA
	LD		gr3,TRUE
	CPA		gr1,gr2
	JMI		.1f70840
	LD		gr3,FALSE
.1f70840	LD		gr1,gr3
	CPA		gr1,gr0
	JZE		.1f6ffc0
; start SCONDSTAT
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	PUSH	0,gr1
; 1f90ec0 SCONST 
; 1f90ec0 SCONST 
	LD		gr1,$1f90ec0
	LD		gr2,gr1
	POP		gr1
	DIVA	gr1,gr2
	JOV		EOVF
	PUSH	0,gr1
; 1f93500 SCONST 
; 1f93500 SCONST 
	LD		gr1,$1f93500
	LD		gr2,gr1
	POP		gr1
	MULA	gr1,gr2
	JOV		EOVF
	PUSH	0,gr1
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	LD		gr2,gr1
	POP		gr1
; GRA
	LD		gr3,TRUE
	CPA		gr1,gr2
	JZE		.1f8ad00
	LD		gr3,FALSE
.1f8ad00	LD		gr1,gr3
	CPA		gr1,gr0
	JZE		.1f8a480
; start SOUTSTAT
	CALL	WRITENEWLINE
; end   SOUTSTAT
.1f8a480
; end   SCONDSTAT
; start SOUTSTAT
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	LAD		gr2,3
	CALL	WRITEINT
; 1fbfac0 SCONST 
; 1fbfac0 SCONST 
	LD		gr1,$1fbfac0
	LD		gr2,gr0
	CALL	WRITECHAR
; end   SOUTSTAT
; start SOUTSTAT
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	LD		gr2,gr0
	CALL	WRITECHAR
; 1fe8500 STRING   
; 1fe8500 STRING   
	LAD		gr1,$1fe8500
	LD		gr2,gr0
	CALL	WRITESTR
; end   SOUTSTAT
; start assign
; 200c3b0 var i % %%grobal%%
	LD		gr1,$200c3b0
	PUSH	0,gr1
; 1ff4440 SCONST 
; 1ff4440 SCONST 
	LD		gr1,$1ff4440
	LD		gr2,gr1
	POP		gr1
	ADDA	gr1,gr2
	JOV		EOVF
; 200c3b0 var i % %%grobal%%
	ST		gr1,$200c3b0
; end   assign
; 1f6ffc0 SITERSTAT 
	JUMP	$1f6ffc0
.1f6ffc0
; end   SITERSTAT
; start SOUTSTAT
	CALL	WRITENEWLINE
; end   SOUTSTAT
	RET
; end   SCOMPSTAT under SBLOCK
$200c3b0	DS		1
$200c860	DS		1
$200cd10	DS		1
$1ed9e80	DC		0
$1efb600	DC		1
$1f2e600	DC		' : '
$1f45c00	DC		1
$1f60940	DC		32
$1f7bac0	DC		127
$1f90ec0	DC		16
$1f93500	DC		16
$1fbfac0	DC		58
$1fe8500	DC		'  '
$1ff4440	DC		1
	NOP
	NOP
	NOP
	NOP
	NOP
EOVF
	CALL WRITENEWLINE
	LAD gr1, EOVF1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 1 ; overflow error stop
EOVF1 DC '***** Run-Time Error : Overflow *****'
E0DIV
	JNZ EOVF
	CALL WRITENEWLINE
	LAD gr1, E0DIV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 2 ; 0-divide error stop
E0DIV1 DC '***** Run-Time Error : Zero-Divide *****'
EROV
	CALL WRITENEWLINE
	LAD gr1, EROV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 3 ; range-over error stop
EROV1 DC '***** Run-Time Error : Range-Over in ArrayIndex *****'
WRITECHAR
; gr1 の値（文字）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, SPACE
	LD gr7, OBUFSIZE
WC1
	SUBA gr2, ONE ; while(--c > 0) {
	JZE WC2
	JMI WC2
	ST gr6, OBUF,gr7 ; *p++ = ' ';
	CALL BOVFCHECK
	JUMP WC1 ; }
WC2
	ST gr1, OBUF,gr7 ; *p++ = gr1;
	CALL BOVFCHECK
	ST gr7, OBUFSIZE
	RPOP
	RET
WRITESTR
; gr1 が指す文字列を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, gr1 ; p = gr1;
WS1
	LD gr4, 0,gr6 ; while(*p != '¥0') {
	JZE WS2
	ADDA gr6, ONE ; p++;
	SUBA gr2, ONE ; c- ;
	JUMP WS1 ; }
WS2
	LD gr7, OBUFSIZE ; q = OBUFSIZE;
	LD gr5, SPACE
WS3
	SUBA gr2, ONE ; while(--c >= 0) {
	JMI WS4
	ST gr5, OBUF,gr7 ; *q++ = ' ';
	CALL BOVFCHECK
	JUMP WS3 ; }
WS4
	LD gr4, 0,gr1 ; while(*gr1 != '¥0') {
	JZE WS5
	ST gr4, OBUF,gr7 ; *q++ = *gr1++;
	ADDA gr1, ONE
	CALL BOVFCHECK
	JUMP WS4 ; }
WS5
	ST gr7, OBUFSIZE ; OBUFSIZE = q;
	RPOP
	RET
BOVFCHECK
	ADDA gr7, ONE
	CPA gr7, BOVFLEVEL
	JMI BOVF1
	CALL WRITENEWLINE
	LD gr7, OBUFSIZE
BOVF1
	RET
BOVFLEVEL DC 256
WRITEINT
; gr1 の値（整数）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr7, gr0 ; flag = 0;
	CPA gr1, gr0 ; if(gr1>=0) goto WI1;
	JPL WI1
	JZE WI1
	LD gr4, gr0 ; gr1= - gr1;
	SUBA gr4, gr1
	CPA gr4, gr1
	JZE WI6
	LD gr1, gr4
	LD gr7, ONE ; flag = 1;
WI1
	LD gr6, SIX ; p = INTBUF+6;
	ST gr0, INTBUF,gr6 ; *p = '¥0';
	SUBA gr6, ONE ; p- ;
	CPA gr1, gr0 ; if(gr1 == 0)
	JNZ WI2
	LD gr4, ZERO ; *p = '0';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI2 ; else {
	CPA gr1, gr0 ; while(gr1 != 0) {
	JZE WI3
	LD gr5, gr1 ; gr5 = gr1 - (gr1 / 10) * 10;
	DIVA gr1, TEN ; gr1 /= 10;
	LD gr4, gr1
	MULA gr4, TEN
	SUBA gr5, gr4
	ADDA gr5, ZERO ; gr5 += '0';
	ST gr5, INTBUF,gr6 ; *p = gr5;
	SUBA gr6, ONE ; p- ;
	JUMP WI2 ; }
WI3
	CPA gr7, gr0 ; if(flag != 0) {
	JZE WI4
	LD gr4, MINUS ; *p = '-';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI4
	ADDA gr6, ONE ; else p++;
	; }
WI5
	LAD gr1, INTBUF,gr6 ; gr1 = p;
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WI6
	LAD gr1, MMINT
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
MMINT DC '-32768'
WRITEBOOL
; gr1 の値（真理値）が 0 なら'FALSE'を
; 0 以外なら'TRUE'を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	CPA gr1, gr0 ; if(gr1 != 0)
	JZE WB1
	LAD gr1, WBTRUE ; gr1 = "TRUE";
	JUMP WB2
WB1 ; else
	LAD gr1, WBFALSE ; gr1 = "FALSE";
WB2
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WBTRUE DC 'TRUE'
WBFALSE DC 'FALSE'
WRITENEWLINE
; 改行を出力する
	RPUSH
	LD gr7, OBUFSIZE
	LD gr6, NEWLINE
	ST gr6, OBUF,gr7
	ADDA gr7, ONE
	ST gr7, OBUFSIZE
	OUT OBUF, OBUFSIZE
	ST gr0, OBUFSIZE
	RPOP
	RET
FLUSH
	RPUSH
	LD gr7, OBUFSIZE
	JZE FL1
	CALL WRITENEWLINE
FL1
	RPOP
	RET
READCHAR
; gr1 が指す番地に文字一つを読み込む
	RPUSH
	LD gr5, RPBBUF ; if(RPBBUF != '¥0') {
	JZE RC0
	ST gr5, 0,gr1 ; *gr1 = RPBBUF;
	ST gr0, RPBBUF ; RPBBUF = '¥0'
	JUMP RC3 ; return; }
RC0
	LD gr7, INP ; inp = INP;
	LD gr6, IBUFSIZE ; if(IBUFSIZE == 0) {
	JNZ RC1
	IN IBUF, IBUFSIZE ; IN();
	LD gr7, gr0 ; inp = 0; }
RC1
	CPA gr7, IBUFSIZE ; if(inp == IBUFSIZE) {
	JNZ RC2
	LD gr5, NEWLINE ; *gr1 = '¥n';
	ST gr5, 0,gr1
	ST gr0, IBUFSIZE ; IBUFSIZE = INP = 0;
	ST gr0, INP
	JUMP RC3 ; }
RC2 ; else {
	LD gr5, IBUF,gr7 ; *gr1 = *inp++;
	ADDA gr7, ONE
	ST gr5, 0,gr1
	ST gr7, INP ; INP = inp;
RC3 ; }
	RPOP
	RET
READINT
; gr1 が指す番地に整数値一つを読み込む
	RPUSH
RI1 ; do {
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
	CPA gr7, SPACE ; } while(ch==' ' || ch=='¥t' || ch=='¥n');
	JZE RI1
	CPA gr7, TAB
	JZE RI1
	CPA gr7, NEWLINE
	JZE RI1
	LD gr5, ONE ; flag = 1
	CPA gr7, MINUS ; if(ch == '-') {
	JNZ RI4
	LD gr5, gr0 ; flag = 0;
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
RI4 ; }
	LD gr6, gr0 ; v = 0;
RI2
	CPA gr7, ZERO ; while('0' <= ch && ch <= '9') {
	JMI RI3
	CPA gr7, NINE
	JPL RI3
	MULA gr6, TEN ; v = v*10+ch-'0';
	ADDA gr6, gr7
	SUBA gr6, ZERO
	CALL READCHAR ; ch = READSCHAR();
	LD gr7, 0,gr1
	JUMP RI2 ; }
RI3
	ST gr7, RPBBUF ; ReadPushBack();
	ST gr6, 0,gr1 ; *gr1 = v;
	CPA gr5, gr0 ; if(flag == 0) {
	JNZ RI5
	SUBA gr5, gr6 ; *gr1 = -v;
	ST gr5, 0,gr1
RI5 ; }
	RPOP
	RET
READSKIPTONEWLINE
; 入力を改行コードまで（改行コードも含む）読み飛ばす
	ST gr0, IBUFSIZE
	ST gr0, INP
	ST gr0, RPBBUF
	RET
TRUE DC 1
FALSE DC 0
ONE DC 1
SIX DC 6
TEN DC 10
SPACE DC #0020 ; ' '
MINUS DC #002D ; '-'
TAB DC #0009 ; '¥t'
ZERO DC #0030 ; '0'
NINE DC #0039 ; '9'
NEWLINE DC #000A ; '¥n'
INTBUF DS 8
OBUFSIZE DC 0
IBUFSIZE DC 0
INP DC 0
OBUF DS 257
IBUF DS 257
RPBBUF DC 0
	end
