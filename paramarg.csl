; start SPROGRAM
; 2068480 SPROGRAM 
$2068480	START
	LAD		gr0,0
; 2069580 SBLOCK 
	CALL	$2069580
	CALL	FLUSH
	SVC		0
; start SSUBPROGDEC
; 2300e10 var a % proc0
; 23009b0 procedure proc0
$23009b0
	POP		gr7
	PUSH	0,gr7
; start assign
; 2077f40 SCONST 
; 2077f40 SCONST 
	LD		gr1,$2077f40
; 2300e10 var a % proc0
	ST		gr1,$2300e10
; end   assign
; start SOUTSTAT
; 2300e10 var a % proc0
	LD		gr1,$2300e10
	LD		gr2,gr0
	CALL	WRITEINT
	CALL	WRITENEWLINE
; end   SOUTSTAT
	RET
; end   SSUBPROGDEC
; start SSUBPROGDEC
; 2301700 var p1 % proc1
; 2301bb0 var a % proc1
; 23012a0 procedure proc1
$23012a0
	POP		gr7
	POP		gr1
; 2301700 var p1 % proc1
	ST		gr1,$2301700
	PUSH	0,gr7
; start assign
; 2301700 var p1 % proc1
	LD		gr2,$2301700
	LD		gr1,0,gr2
; 2301bb0 var a % proc1
	ST		gr1,$2301bb0
; end   assign
; start SOUTSTAT
; 2301bb0 var a % proc1
	LD		gr1,$2301bb0
	LD		gr2,gr0
	CALL	WRITEINT
	CALL	WRITENEWLINE
; end   SOUTSTAT
; start assign
; 20cc6c0 SCONST 
; 20cc6c0 SCONST 
	LD		gr1,$20cc6c0
	PUSH	0,gr1
; 2301700 var p1 % proc1
	LD		gr2,$2301700
	POP		gr1
	ST		gr1,0,gr2
; end   assign
	RET
; end   SSUBPROGDEC
; start SSUBPROGDEC
; 23024a0 var p1 % proc2
; 2302910 var p2 % proc2
; 2302dc0 var a % proc2
; 2302040 procedure proc2
$2302040
	POP		gr7
	POP		gr1
; 2302910 var p2 % proc2
	ST		gr1,$2302910
	POP		gr1
; 23024a0 var p1 % proc2
	ST		gr1,$23024a0
	PUSH	0,gr7
; start assign
; 23024a0 var p1 % proc2
	LD		gr2,$23024a0
	LD		gr1,0,gr2
; 2302dc0 var a % proc2
	ST		gr1,$2302dc0
; end   assign
; start SOUTSTAT
; 2302dc0 var a % proc2
	LD		gr1,$2302dc0
	LD		gr2,gr0
	CALL	WRITEINT
; 210b1c0 SCONST 
; 210b1c0 SCONST 
	LD		gr1,$210b1c0
	LD		gr2,gr0
	CALL	WRITECHAR
; end   SOUTSTAT
; start assign
; 2302910 var p2 % proc2
	LD		gr2,$2302910
	LD		gr1,0,gr2
; 2302dc0 var a % proc2
	ST		gr1,$2302dc0
; end   assign
; start SOUTSTAT
; 2302dc0 var a % proc2
	LD		gr1,$2302dc0
	LD		gr2,gr0
	CALL	WRITEINT
	CALL	WRITENEWLINE
; end   SOUTSTAT
; start assign
; 2139980 SCONST 
; 2139980 SCONST 
	LD		gr1,$2139980
	PUSH	0,gr1
; 23024a0 var p1 % proc2
	LD		gr2,$23024a0
	POP		gr1
	ST		gr1,0,gr2
; end   assign
; start assign
; 2145d00 SCONST 
; 2145d00 SCONST 
	LD		gr1,$2145d00
	PUSH	0,gr1
; 2302910 var p2 % proc2
	LD		gr2,$2302910
	POP		gr1
	ST		gr1,0,gr2
; end   assign
	RET
; end   SSUBPROGDEC
; start SSUBPROGDEC
; 23036b0 var p1 % proc3
; 2303b20 var p2 % proc3
; 2303f90 var p3 % proc3
; 2304440 var a % proc3
; 2303250 procedure proc3
$2303250
	POP		gr7
	POP		gr1
; 2303f90 var p3 % proc3
	ST		gr1,$2303f90
	POP		gr1
; 2303b20 var p2 % proc3
	ST		gr1,$2303b20
	POP		gr1
; 23036b0 var p1 % proc3
	ST		gr1,$23036b0
	PUSH	0,gr7
; start assign
; 23036b0 var p1 % proc3
	LD		gr2,$23036b0
	LD		gr1,0,gr2
; 2304440 var a % proc3
	ST		gr1,$2304440
; end   assign
; start SOUTSTAT
; 2304440 var a % proc3
	LD		gr1,$2304440
	LD		gr2,gr0
	CALL	WRITEINT
; 2185900 SCONST 
; 2185900 SCONST 
	LD		gr1,$2185900
	LD		gr2,gr0
	CALL	WRITECHAR
; end   SOUTSTAT
; start assign
; 2303b20 var p2 % proc3
	LD		gr2,$2303b20
	LD		gr1,0,gr2
; 2304440 var a % proc3
	ST		gr1,$2304440
; end   assign
; start SOUTSTAT
; 2304440 var a % proc3
	LD		gr1,$2304440
	LD		gr2,gr0
	CALL	WRITEINT
; 21b0dc0 SCONST 
; 21b0dc0 SCONST 
	LD		gr1,$21b0dc0
	LD		gr2,gr0
	CALL	WRITECHAR
; end   SOUTSTAT
; start assign
; 2303f90 var p3 % proc3
	LD		gr2,$2303f90
	LD		gr1,0,gr2
; 2304440 var a % proc3
	ST		gr1,$2304440
; end   assign
; start SOUTSTAT
; 2304440 var a % proc3
	LD		gr1,$2304440
	LD		gr2,gr0
	CALL	WRITEINT
	CALL	WRITENEWLINE
; end   SOUTSTAT
; start assign
; 21df580 SCONST 
; 21df580 SCONST 
	LD		gr1,$21df580
	PUSH	0,gr1
; 23036b0 var p1 % proc3
	LD		gr2,$23036b0
	POP		gr1
	ST		gr1,0,gr2
; end   assign
; start assign
; 21eb900 SCONST 
; 21eb900 SCONST 
	LD		gr1,$21eb900
	PUSH	0,gr1
; 2303b20 var p2 % proc3
	LD		gr2,$2303b20
	POP		gr1
	ST		gr1,0,gr2
; end   assign
; start assign
; 21f7c80 SCONST 
; 21f7c80 SCONST 
	LD		gr1,$21f7c80
	PUSH	0,gr1
; 2303f90 var p3 % proc3
	LD		gr2,$2303f90
	POP		gr1
	ST		gr1,0,gr2
; end   assign
	RET
; end   SSUBPROGDEC
; 23048f0 var x % %%global%%
; 2304d60 var y % %%global%%
; 2305210 var arr % %%global%%
; start SCOMPSTAT under SBLOCK
; 2069580 SBLOCK 
$2069580
; start assign
; 221be80 SCONST 
; 221be80 SCONST 
	LD		gr1,$221be80
; 23048f0 var x % %%global%%
	ST		gr1,$23048f0
; end   assign
; start assign
; 2228640 SCONST 
; 2228640 SCONST 
	LD		gr1,$2228640
; 2304d60 var y % %%global%%
	ST		gr1,$2304d60
; end   assign
; start assign
; 223de80 SCONST 
; 223de80 SCONST 
	LD		gr1,$223de80
	PUSH	0,gr1
; 2234580 SCONST 
; 2234580 SCONST 
	LD		gr1,$2234580
	LD		gr3,gr1
	JOV		EOVF
	LAD		gr2,5
	CPA		gr3,gr2
	JMI		.222f4c0
	JUMP	EROV
.222f4c0	POP		gr1
; 2305210 var arr % %%global%%
	ST		gr1,$2305210,gr3
; 2305210 var arr % %%global%%
	LD		gr2,$2305210
; end   assign
; start SCALLSTAT
; 23009b0 procedure proc0
	CALL	$23009b0
; end   SCALLSTAT
; start SCALLSTAT
; start before call 1st arg
; 2256140 SCONST 
; 2256140 SCONST 
	LD		gr1,$2256140
	LD		gr3,gr1
	JOV		EOVF
	LAD		gr2,5
	CPA		gr3,gr2
	JMI		.2251900
	JUMP	EROV
; 2305210 var arr % %%global%%
.2251900	LD		gr1,$2305210,gr3
; 2305210 var arr % %%global%%
	LAD		gr2,$2305210
; 2305210 var arr % %%global%%
	LAD		gr1,$2305210
	PUSH	$2305210,gr3
; end   before call 1st arg
; 23012a0 procedure proc1
	CALL	$23012a0
; end   SCALLSTAT
; start SCALLSTAT
; start before call 1st arg
; 23048f0 var x % %%global%%
	LD		gr1,$23048f0
	PUSH	0,gr1
; 2304d60 var y % %%global%%
	LD		gr1,$2304d60
	LD		gr2,gr1
	POP		gr1
	DIVA	gr1,gr2
	JOV		E0DIV
; 2268f00 SEXPR 
; 2268f00 SEXPR 
	ST		gr1,$2268f00
; 2268f00 SEXPR 
	PUSH	$2268f00
; end   before call 1st arg
; start before call 2nd arg or later
; 227c980 SCONST 
; 227c980 SCONST 
	LD		gr1,$227c980
	LD		gr3,gr1
	JOV		EOVF
	LAD		gr2,5
	CPA		gr3,gr2
	JMI		.2278140
	JUMP	EROV
; 2305210 var arr % %%global%%
.2278140	LD		gr1,$2305210,gr3
; 2305210 var arr % %%global%%
	LAD		gr2,$2305210
; 2305210 var arr % %%global%%
	LAD		gr1,$2305210
	PUSH	$2305210,gr3
; end   before call 2nd arg or later
; 2302040 procedure proc2
	CALL	$2302040
; end   SCALLSTAT
; start SCALLSTAT
; start before call 1st arg
; 23048f0 var x % %%global%%
	LD		gr1,$23048f0
; 23048f0 var x % %%global%%
	PUSH	$23048f0
; end   before call 1st arg
; start before call 2nd arg or later
; 229fec0 SCONST 
; 229fec0 SCONST 
	LD		gr1,$229fec0
	LD		gr3,gr1
	JOV		EOVF
	LAD		gr2,5
	CPA		gr3,gr2
	JMI		.229b680
	JUMP	EROV
; 2305210 var arr % %%global%%
.229b680	LD		gr1,$2305210,gr3
; 2305210 var arr % %%global%%
	LAD		gr2,$2305210
; 2305210 var arr % %%global%%
	LAD		gr1,$2305210
	PUSH	$2305210,gr3
; 23048f0 var x % %%global%%
	LD		gr1,$23048f0
	PUSH	0,gr1
; 2304d60 var y % %%global%%
	LD		gr1,$2304d60
	LD		gr2,gr1
	POP		gr1
; NOTEQ
	LD		gr3,TRUE
	CPA		gr1,gr2
	JNZ		.22b2c80
	LD		gr3,FALSE
.22b2c80	LD		gr1,gr3
; 22ac680 SEXPR 
; 22ac680 SEXPR 
	ST		gr1,$22ac680
; 22ac680 SEXPR 
	PUSH	$22ac680
; end   before call 2nd arg or later
; 2303250 procedure proc3
	CALL	$2303250
; end   SCALLSTAT
; start SCALLSTAT
; start before call 1st arg
; 23048f0 var x % %%global%%
	LD		gr1,$23048f0
; 23048f0 var x % %%global%%
	PUSH	$23048f0
; end   before call 1st arg
; start before call 2nd arg or later
; 2304d60 var y % %%global%%
	LD		gr1,$2304d60
; 2304d60 var y % %%global%%
	PUSH	$2304d60
; 22ead40 SCONST 
; 22ead40 SCONST 
	LD		gr1,$22ead40
	LD		gr3,gr1
	JOV		EOVF
	LAD		gr2,5
	CPA		gr3,gr2
	JMI		.22e6500
	JUMP	EROV
; 2305210 var arr % %%global%%
.22e6500	LD		gr1,$2305210,gr3
; 2305210 var arr % %%global%%
	LAD		gr2,$2305210
; 2305210 var arr % %%global%%
	LAD		gr1,$2305210
	PUSH	$2305210,gr3
; end   before call 2nd arg or later
; 2303250 procedure proc3
	CALL	$2303250
; end   SCALLSTAT
	RET
; end   SCOMPSTAT under SBLOCK
EOVF
	CALL WRITENEWLINE
	LAD gr1, EOVF1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 1 ; overflow error stop
EOVF1 DC '***** Run-Time Error : Overflow *****'
E0DIV
	JNZ EOVF
	CALL WRITENEWLINE
	LAD gr1, E0DIV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 2 ; 0-divide error stop
E0DIV1 DC '***** Run-Time Error : Zero-Divide *****'
EROV
	CALL WRITENEWLINE
	LAD gr1, EROV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITENEWLINE
	SVC 3 ; range-over error stop
EROV1 DC '***** Run-Time Error : Range-Over in ArrayIndex *****'
WRITECHAR
; gr1 の値（文字）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, SPACE
	LD gr7, OBUFSIZE
WC1
	SUBA gr2, ONE ; while(--c > 0) {
	JZE WC2
	JMI WC2
	ST gr6, OBUF,gr7 ; *p++ = ' ';
	CALL BOVFCHECK
	JUMP WC1 ; }
WC2
	ST gr1, OBUF,gr7 ; *p++ = gr1;
	CALL BOVFCHECK
	ST gr7, OBUFSIZE
	RPOP
	RET
WRITESTR
; gr1 が指す文字列を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, gr1 ; p = gr1;
WS1
	LD gr4, 0,gr6 ; while(*p != '¥0') {
	JZE WS2
	ADDA gr6, ONE ; p++;
	SUBA gr2, ONE ; c- ;
	JUMP WS1 ; }
WS2
	LD gr7, OBUFSIZE ; q = OBUFSIZE;
	LD gr5, SPACE
WS3
	SUBA gr2, ONE ; while(--c >= 0) {
	JMI WS4
	ST gr5, OBUF,gr7 ; *q++ = ' ';
	CALL BOVFCHECK
	JUMP WS3 ; }
WS4
	LD gr4, 0,gr1 ; while(*gr1 != '¥0') {
	JZE WS5
	ST gr4, OBUF,gr7 ; *q++ = *gr1++;
	ADDA gr1, ONE
	CALL BOVFCHECK
	JUMP WS4 ; }
WS5
	ST gr7, OBUFSIZE ; OBUFSIZE = q;
	RPOP
	RET
BOVFCHECK
	ADDA gr7, ONE
	CPA gr7, BOVFLEVEL
	JMI BOVF1
	CALL WRITENEWLINE
	LD gr7, OBUFSIZE
BOVF1
	RET
BOVFLEVEL DC 256
WRITEINT
; gr1 の値（整数）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr7, gr0 ; flag = 0;
	CPA gr1, gr0 ; if(gr1>=0) goto WI1;
	JPL WI1
	JZE WI1
	LD gr4, gr0 ; gr1= - gr1;
	SUBA gr4, gr1
	CPA gr4, gr1
	JZE WI6
	LD gr1, gr4
	LD gr7, ONE ; flag = 1;
WI1
	LD gr6, SIX ; p = INTBUF+6;
	ST gr0, INTBUF,gr6 ; *p = '¥0';
	SUBA gr6, ONE ; p- ;
	CPA gr1, gr0 ; if(gr1 == 0)
	JNZ WI2
	LD gr4, ZERO ; *p = '0';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI2 ; else {
	CPA gr1, gr0 ; while(gr1 != 0) {
	JZE WI3
	LD gr5, gr1 ; gr5 = gr1 - (gr1 / 10) * 10;
	DIVA gr1, TEN ; gr1 /= 10;
	LD gr4, gr1
	MULA gr4, TEN
	SUBA gr5, gr4
	ADDA gr5, ZERO ; gr5 += '0';
	ST gr5, INTBUF,gr6 ; *p = gr5;
	SUBA gr6, ONE ; p- ;
	JUMP WI2 ; }
WI3
	CPA gr7, gr0 ; if(flag != 0) {
	JZE WI4
	LD gr4, MINUS ; *p = '-';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI4
	ADDA gr6, ONE ; else p++;
	; }
WI5
	LAD gr1, INTBUF,gr6 ; gr1 = p;
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WI6
	LAD gr1, MMINT
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
MMINT DC '-32768'
WRITEBOOL
; gr1 の値（真理値）が 0 なら'FALSE'を
; 0 以外なら'TRUE'を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	CPA gr1, gr0 ; if(gr1 != 0)
	JZE WB1
	LAD gr1, WBTRUE ; gr1 = "TRUE";
	JUMP WB2
WB1 ; else
	LAD gr1, WBFALSE ; gr1 = "FALSE";
WB2
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WBTRUE DC 'TRUE'
WBFALSE DC 'FALSE'
WRITENEWLINE
; 改行を出力する
	RPUSH
	LD gr7, OBUFSIZE
	LD gr6, NEWLINE
	ST gr6, OBUF,gr7
	ADDA gr7, ONE
	ST gr7, OBUFSIZE
	OUT OBUF, OBUFSIZE
	ST gr0, OBUFSIZE
	RPOP
	RET
FLUSH
	RPUSH
	LD gr7, OBUFSIZE
	JZE FL1
	CALL WRITENEWLINE
FL1
	RPOP
	RET
READCHAR
; gr1 が指す番地に文字一つを読み込む
	RPUSH
	LD gr5, RPBBUF ; if(RPBBUF != '¥0') {
	JZE RC0
	ST gr5, 0,gr1 ; *gr1 = RPBBUF;
	ST gr0, RPBBUF ; RPBBUF = '¥0'
	JUMP RC3 ; return; }
RC0
	LD gr7, INP ; inp = INP;
	LD gr6, IBUFSIZE ; if(IBUFSIZE == 0) {
	JNZ RC1
	IN IBUF, IBUFSIZE ; IN();
	LD gr7, gr0 ; inp = 0; }
RC1
	CPA gr7, IBUFSIZE ; if(inp == IBUFSIZE) {
	JNZ RC2
	LD gr5, NEWLINE ; *gr1 = '¥n';
	ST gr5, 0,gr1
	ST gr0, IBUFSIZE ; IBUFSIZE = INP = 0;
	ST gr0, INP
	JUMP RC3 ; }
RC2 ; else {
	LD gr5, IBUF,gr7 ; *gr1 = *inp++;
	ADDA gr7, ONE
	ST gr5, 0,gr1
	ST gr7, INP ; INP = inp;
RC3 ; }
	RPOP
	RET
READINT
; gr1 が指す番地に整数値一つを読み込む
	RPUSH
RI1 ; do {
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
	CPA gr7, SPACE ; } while(ch==' ' || ch=='¥t' || ch=='¥n');
	JZE RI1
	CPA gr7, TAB
	JZE RI1
	CPA gr7, NEWLINE
	JZE RI1
	LD gr5, ONE ; flag = 1
	CPA gr7, MINUS ; if(ch == '-') {
	JNZ RI4
	LD gr5, gr0 ; flag = 0;
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
RI4 ; }
	LD gr6, gr0 ; v = 0;
RI2
	CPA gr7, ZERO ; while('0' <= ch && ch <= '9') {
	JMI RI3
	CPA gr7, NINE
	JPL RI3
	MULA gr6, TEN ; v = v*10+ch-'0';
	ADDA gr6, gr7
	SUBA gr6, ZERO
	CALL READCHAR ; ch = READSCHAR();
	LD gr7, 0,gr1
	JUMP RI2 ; }
RI3
	ST gr7, RPBBUF ; ReadPushBack();
	ST gr6, 0,gr1 ; *gr1 = v;
	CPA gr5, gr0 ; if(flag == 0) {
	JNZ RI5
	SUBA gr5, gr6 ; *gr1 = -v;
	ST gr5, 0,gr1
RI5 ; }
	RPOP
	RET
READSKIPTONEWLINE
; 入力を改行コードまで（改行コードも含む）読み飛ばす
	ST gr0, IBUFSIZE
	ST gr0, INP
	ST gr0, RPBBUF
	RET
TRUE DC 1
FALSE DC 0
ONE DC 1
SIX DC 6
TEN DC 10
SPACE DC #0020 ; ' '
MINUS DC #002D ; '-'
TAB DC #0009 ; '¥t'
ZERO DC #0030 ; '0'
NINE DC #0039 ; '9'
NEWLINE DC #000A ; '¥n'
INTBUF DS 8
OBUFSIZE DC 0
IBUFSIZE DC 0
INP DC 0
OBUF DS 257
IBUF DS 257
RPBBUF DC 0
$2300e10	DS		1
$2077f40	DC		0
$2301700	DS		1
$2301bb0	DS		1
$20cc6c0	DC		100
$23024a0	DS		1
$2302910	DS		1
$2302dc0	DS		1
$210b1c0	DC		32
$2139980	DC		200
$2145d00	DC		200
$23036b0	DS		1
$2303b20	DS		1
$2303f90	DS		1
$2304440	DS		1
$2185900	DC		32
$21b0dc0	DC		32
$21df580	DC		300
$21eb900	DC		300
$21f7c80	DC		300
$23048f0	DS		1
$2304d60	DS		1
$2305210	DS		5
$221be80	DC		45
$2228640	DC		5
$223de80	DC		21
$2234580	DC		3
$2256140	DC		3
$2268f00	DC		0
$227c980	DC		3
$229fec0	DC		3
$22ac680	DC		0
$22ead40	DC		3
	END
